<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MainCode</name>
    </assembly>
    <members>
        <member name="T:MainCode.Repository.AdminMenuOptions.AdminOptions">
             <summary>
             This AdminOptions class consists of methods called when a user clicks a menu option in the front-end.
             These methods interact with the Repository to extract or remove data from the Repository.
             </summary>
             <remarks>
             
             public AdminOptions(AdminsRepository _adminsRepository, RepositoryBase&lt;Admin&gt; _adminsRepositoryBase)
             A counstructor that initializes the AdminOptions Class.
             These parameters are used for injection into the class for mock testing.
             <param name="_adminsRepository">The admins repository.</param>
             <param name="_adminsRepositoryBase">The admins IRepository.</param>
             
             public string FindAdminByID(int adminID)
             Finds an admin by ID and returns their details as a string.
             <param name="adminID">The ID of the admin to find.</param>
             <returns>A string containing the admin details if found, or a message indicating that the admin does not exist.</returns>
             
             public string FindAdminByFirstName(string adName)
             Finds admins by their First Name and returns their details as a string.
             <param name="adName">The Name of the admin or admins to find.</param>
             <returns>A string containing the admin details if found, or a message indicating that the admin does not exist.</returns>
             
             public string FindAdminByFullName(string adName, string lName)
             Finds admins by their FullName and returns their details as a string.
             <param name="adName">The Name of the admin or admins to find.</param>
             <param name="lName">The Surname of the admin or admins to find.</param>
             <returns>A string containing the admin details if found, or a message indicating that the admin does not exist.</returns>
             
             public string AddNewAdmin(Admin admin)
             Adds a new admin to the repository and returns a string that shows whether it was successful or not.
             <param name="admin">The admin object of the admin to add.</param>
             <returns>A string containing a message indicating that the admin has been added or not.</returns>
             
             public string UpdateAdmin(Admin admin)
             Updates admin to the repository and returns a string that shows whether it was successful or not.
             <param name="admin">The admin object of the admin to update.</param>
             <returns>A string containing a message indicating that the admin has been updated or not.</returns>
             
             public string RemoveAdmin(int adminId)
             Removes admin from the repository and returns a string that shows whether it was successful or not.
             <param name="adminId">The admin Id of the admin to remove as an integer type.</param>
             <returns>A string containing a message indicating that the admin has been removed or not.</returns>
             
             </remarks>
            
        </member>
        <member name="T:MainCode.Repository.AdminMenuOptions.CategoryOptions">
             <summary>
             This CategoryOptions class consists of methods called when a user clicks a menu option in the front-end.
             These methods interact with the Repository to extract or remove data from the Repository.
             </summary>
             <remarks>
             
             public CategoryOptions(CategoriesRepository _categoriesRepository, RepositoryBase&lt;Category&gt; _categoriesRepositoryBase, IRepository&lt;Category&gt; _categoriesIRepository)
             A counstructor that initializes the CategoryOptions Class.
             These parameters are used for injection into the class for mock testing.
             <param name="_categoriesRepository">The categories repository.</param>
             <param name="_categoriesRepositoryBase">The categories RepositoryBase which is an abstract class.</param>
             <param name="_categoriesRepositoryBase">The categories IRepository which is an interface.</param>
             
             public string FindCategoryByID(int catID)
             Finds an categories by ID and returns their details as a string.
             <param name="cusID">The ID of the category to find.</param>
             <returns>A string containing the category details if found, or a message indicating that the category does not exist.</returns>
             
             public string FindCategoryByName(string catName)
             Finds categories by their Name and returns their details as a string.
             <param name="catName">The Name of the category or categories to find.</param>
             <returns>A string containing the category details if found, or a message indicating that the category does not exist.</returns>
              
             public string AddNewCategory(Category category)
             Adds a new category to the repository and returns a string that shows whether it was successful or not.
             <param name="category">The category object of the category to add.</param>
             <returns>A string containing a message indicating that the category has been added or not.</returns>
             
             public string UpdateCategory(Category category)
             Updates category to the repository and returns a string that shows whether it was successful or not.
             <param name="category">The category object of the category to update.</param>
             <returns>A string containing a message indicating that the category has been updated or not.</returns>
             
             public string RemoveCategory(int cusId)
             Removes category from the repository and returns a string that shows whether it was successful or not.
             <param name="cusId">The Id of the category to remove as an integer type.</param>
             <returns>A string containing a message indicating that the category has been removed or not.</returns>
             
             </remarks>
            
        </member>
        <member name="T:MainCode.Repository.AdminMenuOptions.CustomerOptions">
             <summary>
             This CustomerOptions class consists of methods called when a user clicks a menu option in the front-end.
             These methods interact with the Repository to extract or remove data from the Repository.
             </summary>
             <remarks>
             
             public CustomerOptions(CustomersRepository _customersRepository, RepositoryBase&lt;Customer&gt; _customersRepositoryBase, IRepository&lt;Customer&gt; _customersIRepository)
             A counstructor that initializes the CustomerOptions Class.
             These parameters are used for injection into the class for mock testing.
             <param name="_customersRepository">The customers repository.</param>
             <param name="_customersRepositoryBase">The customers RepositoryBase which is an abstract class.</param>
             <param name="_customersRepositoryBase">The customers IRepository which is an interface.</param>
             
             public string FindCustomerByID(int cusID)
             Finds an customers by ID and returns their details as a string.
             <param name="cusID">The ID of the customer to find.</param>
             <returns>A string containing the customer details if found, or a message indicating that the customer does not exist.</returns>
             
             public string FindCustomerByFirstName(string cusName)
             Finds customers by their First Name and returns their details as a string.
             <param name="cusName">The Name of the customers or customers to find.</param>
             <returns>A string containing the customers details if found, or a message indicating that the customers does not exist.</returns>
             
             public string FindCustomerByFullName(string adName, string lName)
             Finds customers by their FullName and returns their details as a string.
             <param name="cusName">The Name of the customer or customers to find.</param>
             <param name="lName">The Surname of the customer or customers to find.</param>
             <returns>A string containing the customer details if found, or a message indicating that the customers does not exist.</returns>
             
             public string AddNewCustomer(Customer customer)
             Adds a new customer to the repository and returns a string that shows whether it was successful or not.
             <param name="customer">The customer object of the customer to add.</param>
             <returns>A string containing a message indicating that the customer has been added or not.</returns>
             
             public string UpdateCustomer(Customer customer)
             Updates customer to the repository and returns a string that shows whether it was successful or not.
             <param name="customer">The customer object of the customer to update.</param>
             <returns>A string containing a message indicating that the customer has been updated or not.</returns>
             
             public string RemoveCustomer(int cusId)
             Removes customer from the repository and returns a string that shows whether it was successful or not.
             <param name="cusId">The Id of the customer to remove as an integer type.</param>
             <returns>A string containing a message indicating that the customer has been removed or not.</returns>
             
             </remarks>
            
        </member>
        <member name="T:MainCode.Repository.AdminMenuOptions.OrderDetailOptions">
             <summary>
             This OrderDetailOptions class consists of methods called when a user clicks a menu option in the front-end.
             These methods interact with the Repository to extract or remove data from the Repository.
             </summary>
             <remarks>
             
             public OrderDetailOptions(OrderDetailsRepository _orderDetailsRepository, OrdersRepository _ordersRepository)
             A counstructor that initializes the OrderDetailOptions Class.
             These parameters are used for injection into the class for mock testing.
             <param name="_orderDetailsRepository">The orderDetails repository.</param>
             <param name="_ordersRepositoryBase">The orders repository.</param>
             
             public string FindOrderDetailByOrderID(int orderID)
             Finds an order by ID and returns the order details as a string.
             <param name="orderID">The ID of the order to find.</param>
             <returns>A string containing the order details if found, or a message indicating that the order does not exist.</returns>
            </remarks>
        </member>
        <member name="T:MainCode.Repository.AdminMenuOptions.OrderOptions">
            <summary>
            This OrderOptions class consists of methods called when a user clicks a menu option in the front-end.
            These methods interact with the Repository to extract or remove data from the Repository.
            </summary>
            <remarks>
            
            public OrderOptions(OrdersRepository _ordersRepository)
            A counstructor that initializes the OrderOptions Class.
            These parameters are used for injection into the class for mock testing.
            <param name="_ordersRepositoryBase">The orders repository.</param>
            
            public string FindOrderByID(int orderID)
            Finds an order by ID and returns the order details as a string.
            <param name="orderID">The ID of the order to find.</param>
            <returns>A string containing the order details if found, or a message indicating that the order does not exist.</returns>
            
            public string FindOrdersbyDate(string inputDate)
            Finds an order by date and returns the order details as a string.
            <param name="inputDate">The date of the order to find.</param>
            <returns>A string containing the order details if found, or a message indicating that the order does not exist.</returns>
            
            public string FindOrdersbyBetweenDates(string inputDate, string inputDateTwo)
            Finds an order by between dates and returns the order details as a string.
            <param name="inputDate">The beginning date of the order to find.</param>
            <param name="inputDateTwo">The end date of the order to find.</param>
            <returns>A string containing the order details if found, or a message indicating that the order does not exist.</returns>
            </remarks>
        </member>
    </members>
</doc>
